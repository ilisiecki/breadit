generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          =  env("DATABASE_URL")
  relationMode = "prisma"
}

enum VoteType {
  UP
  DOWN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model User {
  id                String          @id @default(cuid())
  name              String?
  email             String?         @unique
  emailVerified     DateTime?
  image             String?
  username          String?         @unique
  subscriptions     Subscription[]
  votes             Vote[]
  accounts          Account[]
  sessions          Session[]
  Post              Post[]
  Comment           Comment[]
  CommentVote       CommentVote[]

  createdSubreddits Subreddit[]     @relation("CreatedBy")
}

model Subreddit {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]
  creatorId   String?
  subscribers Subscription[]

  Creator     User?          @relation("CreatedBy", fields: [creatorId], references: [id])
  @@index([creatorId])
  @@index([name])
}

model Subscription {
  userId      String
  subredditId String

  user        User      @relation(fields: [userId], references: [id])
  subreddit   Subreddit @relation(fields: [subredditId], references: [id])
  @@id([userId, subredditId])
  @@index([userId])
  @@index([subredditId])
}

model Post {
  id          String    @id @default(cuid())
  title       String
  content     Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  authorId    String
  subredditId String
  comments    Comment[] 
  votes       Vote[]

  author      User      @relation(fields: [authorId], references: [id])
  subreddit   Subreddit @relation(fields: [subredditId], references: [id])
  @@index([authorId])
  @@index([subredditId])
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  authorId  String
  postId    String
  commentId String?
  replyToId String?
  votes     CommentVote[]

  author    User     @relation(fields: [authorId], references: [id])
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")
  @@index([authorId])
  @@index([postId])
  @@index([replyToId])
}

model Vote {
  userId String
  postId String
  type   VoteType

  user   User     @relation(fields: [userId], references: [id])
  post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  @@id([userId, postId])
  @@index([userId])
  @@index([postId])

}

model CommentVote {
  userId    String
  commentId String
  type      VoteType

  user      User     @relation(fields: [userId], references: [id])
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  @@id([userId, commentId])
  @@index([userId])
  @@index([commentId])
}